
/* Autogenerated with kurento-module-creator */

#include <gst/gst.h>
#include <vector>
#include <EyeInfo.hpp> 
#include "MediaPipeline.hpp"
#include "MediaPipelineImpl.hpp"
#include <NuboEyeDetectorImplFactory.hpp>
#include "NuboEyeDetectorImpl.hpp"
#include <jsonrpc/JsonSerializer.hpp>
#include <KurentoException.hpp>
#include <SignalHandler.hpp>
#include <memory>

#define GST_CAT_DEFAULT kurento_nubo_eye_detector_impl
GST_DEBUG_CATEGORY_STATIC (GST_CAT_DEFAULT);
#define GST_DEFAULT_NAME "KurentoNuboEyeDetectorImpl"

#define VIEW_EYES "view-eyes"
#define DETECT_BY_EVENT "detect-event"
#define SEND_META_DATA "send-meta-data"
#define FACTOR_SCALE "multi-scale-factor"
#define X_EVERY_4_FRAMES "process-x-every-4-frames"
#define WIDTH_TO_PROCESS "width-to-process"
#define ACTIVATE_EVENTS "activate-events"
#define EVENTS_MS "events-ms"

namespace kurento
{
  namespace module
  {
    namespace nuboeyedetector
    {


      void  NuboEyeDetectorImpl::split_message (std::string fi, std::string delimiter, 
					     std::vector<std::string> *v)
      {
	size_t pos = 0;
	std::string token;
	
	while ((pos = fi.find(delimiter)) != std::string::npos) {
	  token = fi.substr(0, pos);  
	  v->push_back(token);
	  fi.erase(0, pos + delimiter.length());
	}
	
	v->push_back(fi);
	
      }

      
      void NuboEyeDetectorImpl::onEye (gchar *message)
      {

	//the String received will be like this ( the ; is the seperation among eyes): 
	//  x:int,y:int,width:int,height:int;x:int,y:int,width:int,height:int;
	std::string del1 = ";";
	std::string del2 = ",";
	std::string del3 = ":";
	std::vector<std::string> *eyes = new std::vector<std::string>;
	std::vector<std::string> *fields = new std::vector<std::string>;
	std::vector<std::string> *all = new std::vector<std::string>;
	std::vector<std::shared_ptr<EyeInfo>> test;
	int x,y,height,width;
	std::string t;
	
	bool register_completed=true;
	int i=0;

	try {
	
	  split_message(message,del1,eyes);
	  for( i=0; (int)(eyes->size())>i; i++) 
	    split_message(eyes->at(i),del2,fields);
    
	  for( i=0; (int)(fields->size())>i; i++)
	    split_message(fields->at(i),del3,all);
    
	  for(int i=0; (int)(all->size())>i; i=i+2)
	    {
	      if (register_completed)
		{
		  t="eye";
		  x=0;y=0;width=0;height=0;
		  register_completed=false;
		}
	      if (0==all->at(i).compare("x")) 	
		{
		  if ((i+1)< (int)(all->size()))	      
		    x=std::stoi(all->at(i+1));
		}
	      else if (0==all->at(i).compare("y")) 
		{
		  if ((i+1)< (int)(all->size()))
		    y=std::stoi(all->at(i+1));
		}
	
	      else if (0==all->at(i).compare("width"))     
		{
		  if ((i+1)< (int)(all->size()))
 		    width=std::stoi(all->at(i+1));
		}

	      else if (0==all->at(i).compare("height"))     
		{
		  if ((i+1)< (int)(all->size()))
		    {
		      height=std::stoi(all->at(i+1));
		      std::shared_ptr <EyeInfo> cand ( new EyeInfo(t,x,y,width,height));
		      test.push_back(cand);
		      register_completed=true;

		    }
		}
	    }

	  if (test.size()>0)
	    {
	      OnEye event (shared_from_this(), OnEye::getName(), test);
	      signalOnEye (event);
	    }
	} catch (std::bad_weak_ptr &e) {
	}
      }

      void NuboEyeDetectorImpl::postConstructor ()
      {
	handlerOnEyeEvent = register_signal_handler (G_OBJECT (nubo_eye),
			    "eye-event",
			    std::function <void (GstElement *, gchar *) >
			    (std::bind (&NuboEyeDetectorImpl::onEye, this,
			     std::placeholders::_2) ),
			     std::dynamic_pointer_cast<NuboEyeDetectorImpl>
			     (shared_from_this() ) );
      }

      NuboEyeDetectorImpl::NuboEyeDetectorImpl (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline)  : FilterImpl (config, std::dynamic_pointer_cast<MediaPipelineImpl> (mediaPipeline)) 
      {
 
	g_object_set (element, "filter-factory", "nuboeyedetector", NULL);
  
	g_object_get (G_OBJECT (element), "filter", &nubo_eye, NULL);

	if (NULL == nubo_eye) {
	  throw KurentoException (MEDIA_OBJECT_NOT_AVAILABLE,
				  "Media Object not available");
	}

	g_object_unref(nubo_eye); 
      }

      void NuboEyeDetectorImpl::showEyes (int viewEyes)
      {
	g_object_set(G_OBJECT (nubo_eye), VIEW_EYES, viewEyes, NULL);
      }


      void NuboEyeDetectorImpl::detectByEvent(int event)
      {
  
	g_object_set(G_OBJECT (nubo_eye), DETECT_BY_EVENT, event, NULL);
  
      }
  
      void NuboEyeDetectorImpl::sendMetaData(int metaData)
      {
	g_object_set(G_OBJECT (nubo_eye),SEND_META_DATA , metaData, NULL);
      }

      void NuboEyeDetectorImpl::multiScaleFactor(int scaleFactor)
      {
	g_object_set(G_OBJECT (nubo_eye),FACTOR_SCALE , scaleFactor, NULL);
      }

      void NuboEyeDetectorImpl::processXevery4Frames(int xper4)
      {
	g_object_set(G_OBJECT (nubo_eye),X_EVERY_4_FRAMES , xper4, NULL);
      }

      void NuboEyeDetectorImpl::widthToProcess(int width)
      {
 	g_object_set(G_OBJECT (nubo_eye),WIDTH_TO_PROCESS , width, NULL);
      }

      void NuboEyeDetectorImpl::activateServerEvents (int activate,int ms)
      {
	g_object_set (G_OBJECT (nubo_eye), ACTIVATE_EVENTS , activate, NULL);
	g_object_set (G_OBJECT (nubo_eye), EVENTS_MS , ms , NULL);
      }      

      void NuboEyeDetectorImpl::unsetOverlayedImage ()
      {
        GstStructure *imageSt;
        imageSt = gst_structure_new ("image",
                                     "offsetXPercent", G_TYPE_DOUBLE, 0.0,
                                     "offsetYPercent", G_TYPE_DOUBLE, 0.0,
                                     "widthPercent", G_TYPE_DOUBLE, 0.0,
                                     "heightPercent", G_TYPE_DOUBLE, 0.0,
                                     "url", G_TYPE_STRING, NULL,
                                     NULL);
        g_object_set (G_OBJECT (nubo_eye), "image-to-overlay", imageSt, NULL);
        gst_structure_free (imageSt);
      }

      void NuboEyeDetectorImpl::setOverlayedImage (const std::string &uri, float offsetXPercent, float offsetYPercent, float widthPercent, float heightPercent)
      {
        GstStructure *imageSt;
        imageSt = gst_structure_new ("image",
                                     "offsetXPercent", G_TYPE_DOUBLE, double (offsetXPercent),
                                     "offsetYPercent", G_TYPE_DOUBLE, double (offsetYPercent),
                                     "widthPercent", G_TYPE_DOUBLE, double (widthPercent),
                                     "heightPercent", G_TYPE_DOUBLE, double (heightPercent),
                                     "url", G_TYPE_STRING, uri.c_str(),
                                     NULL);
        g_object_set (G_OBJECT (nubo_eye), "image-to-overlay", imageSt, NULL);
        gst_structure_free (imageSt);
      }

      MediaObjectImpl *
      NuboEyeDetectorImplFactory::createObject (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline) const
      {
	return new NuboEyeDetectorImpl (config, mediaPipeline);
      }

      NuboEyeDetectorImpl::StaticConstructor NuboEyeDetectorImpl::staticConstructor;

      NuboEyeDetectorImpl::StaticConstructor::StaticConstructor()
      {
	GST_DEBUG_CATEGORY_INIT (GST_CAT_DEFAULT, GST_DEFAULT_NAME, 0,
				 GST_DEFAULT_NAME);
      }

      NuboEyeDetectorImpl::~NuboEyeDetectorImpl()
      {
	if ( handlerOnEyeEvent > 0) {
	  unregister_signal_handler (nubo_eye, handlerOnEyeEvent );
	}
      }
    } /* nuboeyedetector */
  } /* module */
} /* kurento */
