/* Autogenerated with kurento-module-creator */

#ifndef __NUBO_MOUTH_DETECTOR_IMPL_HPP__
#define __NUBO_MOUTH_DETECTOR_IMPL_HPP__

#include "FilterImpl.hpp"
#include "NuboMouthDetector.hpp"
#include <EventHandler.hpp>
#include <boost/property_tree/ptree.hpp>

namespace kurento
{
namespace module
{
namespace nubomouthdetector
{
class NuboMouthDetectorImpl;
} /* nubomouthdetector */
} /* module */
} /* kurento */

namespace kurento
{
void Serialize (std::shared_ptr<kurento::module::nubomouthdetector::NuboMouthDetectorImpl> &object, JsonSerializer &serializer);
} /* kurento */

namespace kurento
{
class MediaPipelineImpl;
} /* kurento */

namespace kurento
{
namespace module
{
namespace nubomouthdetector
{

class NuboMouthDetectorImpl : public FilterImpl, public virtual NuboMouthDetector
{

public:

  NuboMouthDetectorImpl (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline);

  virtual ~NuboMouthDetectorImpl ();

  void showMouths(int viewMouths);
  void detectByEvent(int event);
  void sendMetaData(int metaData);
  void multiScaleFactor(int scaleFactor);
  void processXevery4Frames(int xper4);
  void widthToProcess(int width);
  void activateServerEvents (int activate,int ms);
  void unsetOverlayedImage ();
  void setOverlayedImage (const std::string &uri, float offsetXPercent, float offsetYPercent, float widthPercent, float heightPercent);

  /* Next methods are automatically implemented by code generator */
  sigc::signal<void, OnMouth> signalOnMouth;
  virtual bool connect (const std::string &eventType, std::shared_ptr<EventHandler> handler);
  virtual void invoke (std::shared_ptr<MediaObjectImpl> obj,
                       const std::string &methodName, const Json::Value &params,
                       Json::Value &response);

  virtual void Serialize (JsonSerializer &serializer);


protected: 
  virtual void postConstructor ();

private:

  GstElement *nubo_mouth = NULL;
  gulong handlerOnMouthEvent = 0;
  void onMouth (gchar *);
  void split_message (std::string fi, std::string delimiter, std::vector<std::string> *v);
  class StaticConstructor
  {
  public:
    StaticConstructor();
  };

  static StaticConstructor staticConstructor;

};

} /* nubomouthdetector */
} /* module */
} /* kurento */

#endif /*  __NUBO_MOUTH_DETECTOR_IMPL_HPP__ */
